package parser

import (
	"fmt"
	"strings"

	"github.com/iancoleman/strcase"
	"github.com/xinchentechnote/fin-protoc/internal/model"
)

// RustGenerator gen rust code
type RustGenerator struct{}

// GenerateCode gen struct and encode decode code
func (g RustGenerator) GenerateCode(msg model.Packet) string {
	var b strings.Builder

	// Rust use statements
	b.WriteString("// Code generated by fin-protoc. DO NOT EDIT.\n")
	b.WriteString("use binary_codec::*;\n")
	b.WriteString("use bytes::{Buf, BufMut, Bytes, BytesMut};\n\n")

	// struct
	structName := toRustStructName(msg.Name)
	b.WriteString("#[derive(Debug, Clone, PartialEq)]\n")
	b.WriteString(fmt.Sprintf("pub struct %s {\n", structName))
	for _, f := range msg.Fields {
		b.WriteString(fmt.Sprintf("    pub %s: %s,\n", toSnake(f.Name), f.GetType()))
	}
	b.WriteString("}\n\n")

	// impl BinaryCodec
	b.WriteString(fmt.Sprintf("impl BinaryCodec for %s {\n", structName))

	// encode()
	b.WriteString("    fn encode(&self, buf: &mut BytesMut) {\n")
	for _, f := range msg.Fields {
		b.WriteString(fmt.Sprintf("        %s\n", g.EncodeField(f)))
	}
	b.WriteString("    }\n\n")

	// decode()
	b.WriteString(fmt.Sprintf("    fn decode(buf: &mut Bytes) -> Option<%s> {\n", structName))
	for _, f := range msg.Fields {
		b.WriteString(fmt.Sprintf("        %s\n", g.DecodeField(f)))
	}
	b.WriteString("        Some(Self {\n")
	for _, f := range msg.Fields {
		b.WriteString(fmt.Sprintf("            %s,\n", toSnake(f.Name)))
	}
	b.WriteString("        })\n")
	b.WriteString("    }\n")
	b.WriteString("}\n")

	return b.String()
}

// assistant functions
// toSnake converts a CamelCase or PascalCase name to snake_case.
func toSnake(name string) string {
	return strcase.ToSnake(name)
}

// toRustStructName converts a name to CamelCase for Rust struct naming conventions.
func toRustStructName(name string) string {
	return strcase.ToCamel(name) // Rust structs ç”¨ CamelCase
}

// EncodeField encoding field
func (RustGenerator) EncodeField(f model.Field) string {
	name := toSnake(f.Name)
	switch f.GetType() {
	case "string", "String":
		return fmt.Sprintf("put_string(buf, &self.%s);", name)
	case "u8", "uint8":
		return fmt.Sprintf("buf.put_u8(self.%s);", name)
	case "u16", "uint16":
		return fmt.Sprintf("buf.put_u16(self.%s);", name)
	case "u32", "uint32":
		return fmt.Sprintf("buf.put_u32(self.%s);", name)
	case "u64", "uint64":
		return fmt.Sprintf("buf.put_u64(self.%s);", name)
	default:
		return fmt.Sprintf("// unknown type for encode: %s", f.GetType())
	}
}

// DecodeField decoding field
func (RustGenerator) DecodeField(f model.Field) string {
	name := toSnake(f.Name)
	switch f.GetType() {
	case "string", "String":
		return fmt.Sprintf("let %s = get_string(buf)?;", name)
	case "u8", "uint8":
		return fmt.Sprintf("let %s = buf.get_u8();", name)
	case "u16", "uint16":
		return fmt.Sprintf("let %s = buf.get_u16();", name)
	case "u32", "uint32":
		return fmt.Sprintf("let %s = buf.get_u32();", name)
	case "u64", "uint64":
		return fmt.Sprintf("let %s = buf.get_u64();", name)
	default:
		return fmt.Sprintf("// unknown type for decode: %s", f.GetType())
	}
}

// FileExtension rust file extension
func (RustGenerator) FileExtension() string {
	return ".rs"
}

// GenerateTestCode gen unit test code
func (g RustGenerator) GenerateTestCode(packet model.Packet) string {
	var b strings.Builder

	structName := toRustStructName(packet.Name)
	instanceName := strcase.ToSnake(packet.Name)

	b.WriteString("#[cfg(test)]\nmod tests {\n")
	b.WriteString("    use super::*;\n")
	b.WriteString("    use bytes::BytesMut;\n\n")
	b.WriteString("    #[test]\n")
	b.WriteString(fmt.Sprintf("    fn test_%s_codec() {\n", instanceName))

	// new instance
	b.WriteString(fmt.Sprintf("        let original = %s {\n", structName))
	for _, f := range packet.Fields {
		b.WriteString(fmt.Sprintf("            %s: %s,\n", toSnake(f.Name), g.TestValue(f)))
	}
	b.WriteString("        };\n\n")

	// encoding
	b.WriteString("        let mut buf = BytesMut::new();\n")
	b.WriteString("        original.encode(&mut buf);\n")
	b.WriteString("        let mut bytes = buf.freeze();\n\n")

	// decoding
	b.WriteString(fmt.Sprintf("        let decoded = %s::decode(&mut bytes).unwrap();\n\n", structName))

	// assertion
	b.WriteString("        assert_eq!(original, decoded);\n")
	b.WriteString("    }\n")
	b.WriteString("}\n")

	return b.String()
}

// TestValue gen test value for deferent field type
func (RustGenerator) TestValue(f model.Field) string {
	switch f.GetType() {
	case "string":
		return `"example".to_string()`
	case "u8":
		return "42"
	case "u16":
		return "1234"
	case "u32":
		return "123456"
	case "u64":
		return "123456789"
	default:
		return "Default::default()"
	}
}
