package parser

import (
	"fmt"
	"strings"
	"time"

	"github.com/iancoleman/strcase"
	"github.com/xinchentechnote/fin-protoc/internal/model"
)

// CppType represents a C++ type with its name, basic type, and size.
type CppType struct {
	Name      string
	BasicType string
	Le        string
	Size      int
}

var cppBaiscTypeMap = map[string]CppType{
	"i8":  {"int8_t", "int", "i8", 1},
	"i16": {"int16_t", "int", "i16_le", 2},
	"i32": {"int32_t", "int", "i32_le", 4},
	"i64": {"int64_t", "int", "i64_le", 8},
	"u8":  {"uint8_t", "unsigned int", "u8", 1},
	"u16": {"uint16_t", "unsigned int", "u16_le", 2},
	"u32": {"uint32_t", "unsigned int", "u32_le", 4},
	"u64": {"uint64_t", "unsigned int", "u64_le", 8},
	"f32": {"float", "float", "f32_le", 4},
	"f64": {"double", "double", "f64_le", 8},
}

// CppGenerator a go code generator
type CppGenerator struct {
	config   *GeneratorConfig
	binModel *model.BinaryModel
	hasGen   map[string]*model.Packet
}

// NewCppGenerator new
func NewCppGenerator(config *GeneratorConfig, binModel *model.BinaryModel) *CppGenerator {
	return &CppGenerator{
		config:   config,
		binModel: binModel,
		hasGen:   make(map[string]*model.Packet),
	}
}

// Generate go code
func (g CppGenerator) Generate(binModel *model.BinaryModel) (map[string][]byte, error) {
	output := make(map[string][]byte)
	var b strings.Builder
	b.WriteString(fmt.Sprintf("// Copyright %d xinchentechnote\n", time.Now().Year()))
	b.WriteString("// Code generated by fin-protoc. DO NOT EDIT.\n")
	b.WriteString("#pragma once\n")
	b.WriteString("#include <cstdint>\n")
	b.WriteString("#include <memory>\n")
	b.WriteString("#include <string>\n")
	b.WriteString("#include <vector>\n")
	b.WriteString("#include <iostream>\n")
	b.WriteString("#include \"include/codec.hpp\"\n")
	b.WriteString("#include \"include/bytebuf.hpp\"\n")
	b.WriteString("\n")
	code := g.generateHppFile(binModel)
	b.WriteString(code)
	output["include/"+strcase.ToSnake(binModel.RootPacket.Name)+".hpp"] = []byte(b.String())
	return output, nil
}

func (g CppGenerator) generateHppFile(binModel *model.BinaryModel) string {
	var b strings.Builder
	for _, pkt := range binModel.PacketsMap {
		if !pkt.IsRoot {
			code := g.generateCodeForPacket(&pkt)
			b.WriteString(code)
			b.WriteString("\n")
		}
	}
	code := g.generateCodeForPacket(&binModel.RootPacket)
	b.WriteString(code)
	b.WriteString("\n")
	return b.String()
}

func (g CppGenerator) generateCodeForPacket(p *model.Packet) string {
	if _, ok := g.hasGen[p.Name]; ok {
		return ""
	}
	g.hasGen[p.Name] = p
	var b strings.Builder

	//iner
	for _, f := range p.Fields {
		if f.InerObject != nil {
			b.WriteString(g.generateCodeForPacket(f.InerObject))
			b.WriteString("\n")
		}
		if mp, ok := g.binModel.PacketsMap[f.GetType()]; ok {
			b.WriteString(g.generateCodeForPacket(&mp))
			b.WriteString("\n")
		}
	}
	//struct
	b.WriteString(fmt.Sprintf("struct %s : public codec::BinaryCodec {\n", p.Name))
	for _, field := range p.Fields {
		b.WriteString("    " + g.getFieldType(&field) + " " + strcase.ToLowerCamel(field.Name) + ";\n")
	}

	b.WriteString("\n")
	//gen encode method
	b.WriteString(AddIndent4ln(g.generateEncode(p)))
	b.WriteString("\n")

	//gen decode method
	b.WriteString(AddIndent4ln(g.generateDecode(p)))
	b.WriteString("\n")

	//tostring
	b.WriteString(AddIndent4ln(g.generateToString(p)))

	b.WriteString("};\n")

	// override operator<<
	b.WriteString("\n")
	b.WriteString(g.generateOstreamOperator(p))

	b.WriteString("\n")
	return b.String()
}

func (g CppGenerator) generateEncode(p *model.Packet) string {
	var b strings.Builder
	b.WriteString("void encode(ByteBuf& buf) const override {\n")
	strLenTyp := cppBaiscTypeMap[g.config.StringLenPrefixLenType]
	listLenTyp := cppBaiscTypeMap[g.config.ListLenPrefixLenType]
	for _, f := range p.Fields {
		if typ, ok := cppBaiscTypeMap[f.GetType()]; ok {
			if f.IsRepeat {
				if g.config.LittleEndian {
					b.WriteString(fmt.Sprintf("    codec::put_basic_type_le<%s,%s>(buf,%s);\n", listLenTyp.Name, typ.Name, strcase.ToLowerCamel(f.Name)))
				} else {
					b.WriteString(fmt.Sprintf("    codec::put_basic_type<%s,%s>(buf,%s);\n", listLenTyp.Name, typ.Name, strcase.ToLowerCamel(f.Name)))
				}
			} else {
				if g.config.LittleEndian {
					b.WriteString(fmt.Sprintf("    buf.write_%s(%s);\n", typ.Le, strcase.ToLowerCamel(f.Name)))
				} else {
					b.WriteString(fmt.Sprintf("    buf.write_%s(%s);\n", f.GetType(), strcase.ToLowerCamel(f.Name)))
				}
			}
		} else if size, ok := ParseCharArrayType(f.GetType()); ok {
			if f.IsRepeat {
				if g.config.LittleEndian {
					b.WriteString(fmt.Sprintf("    codec::put_fixed_string_list_le<%s>(buf, %s, %s);\n", listLenTyp.Name, strcase.ToLowerCamel(f.Name), size))
				} else {
					b.WriteString(fmt.Sprintf("    codec::put_fixed_string_list<>%s(buf, %s, %s);\n", listLenTyp.Name, strcase.ToLowerCamel(f.Name), size))
				}
			} else {
				b.WriteString(fmt.Sprintf("    codec::put_fixed_string(buf, %s, %s);\n", strcase.ToLowerCamel(f.Name), size))
			}
		} else if f.GetType() == "string" || f.GetType() == "char[]" {
			if f.IsRepeat {
				if g.config.LittleEndian {
					b.WriteString(fmt.Sprintf("    codec::put_string_list_le<%s,%s>(buf, %s);\n", listLenTyp.Name, strLenTyp.Name, strcase.ToLowerCamel(f.Name)))
				} else {
					b.WriteString(fmt.Sprintf("    codec::put_string_list<%s,%s>(buf, %s);\n", listLenTyp.Name, strLenTyp.Name, strcase.ToLowerCamel(f.Name)))
				}
			} else {
				if g.config.LittleEndian {
					b.WriteString(fmt.Sprintf("    codec::put_string_le<%s>(buf, %s);\n", strLenTyp.Name, strcase.ToLowerCamel(f.Name)))
				} else {
					b.WriteString(fmt.Sprintf("    codec::put_string<%s>(buf, %s);\n", strLenTyp.Name, strcase.ToLowerCamel(f.Name)))
				}
			}
		} else if f.InerObject != nil {
			if f.IsRepeat {
				if g.config.LittleEndian {
					b.WriteString(fmt.Sprintf("    codec::put_object_List_le<%s>(buf,%s);\n", listLenTyp.Name, strcase.ToLowerCamel(f.Name)))
				} else {
					b.WriteString(fmt.Sprintf("    codec::put_object_List<%s>(buf,%s);\n", listLenTyp.Name, strcase.ToLowerCamel(f.Name)))
				}
			} else {
				b.WriteString(fmt.Sprintf("    %s.encode(buf);\n", strcase.ToLowerCamel(f.Name)))
			}
		} else if _, ok := g.binModel.PacketsMap[f.GetType()]; ok {
			if f.IsRepeat {
				if g.config.LittleEndian {
					b.WriteString(fmt.Sprintf("    codec::put_object_List_le<%s>(buf,%s);\n", listLenTyp.Name, strcase.ToLowerCamel(f.Name)))
				} else {
					b.WriteString(fmt.Sprintf("    codec::put_object_List<%s>(buf,%s);\n", listLenTyp.Name, strcase.ToLowerCamel(f.Name)))
				}
			} else {
				b.WriteString(fmt.Sprintf("    %s.encode(buf);\n", strcase.ToLowerCamel(f.Name)))
			}
		} else if f.GetType() == "match" {
			b.WriteString(fmt.Sprintf("    %s->encode(buf);\n", strcase.ToLowerCamel(f.Name)))
		} else {
			b.WriteString("-- unsupport type:" + f.GetType() + "\n")
		}
	}
	b.WriteString("}\n")
	return b.String()
}

func (g CppGenerator) generateDecode(p *model.Packet) string {
	var b strings.Builder
	strLenTyp := cppBaiscTypeMap[g.config.StringLenPrefixLenType]
	listLenTyp := cppBaiscTypeMap[g.config.ListLenPrefixLenType]
	b.WriteString("void decode(ByteBuf& buf) override {\n")
	for _, f := range p.Fields {
		if typ, ok := cppBaiscTypeMap[f.GetType()]; ok {
			if f.IsRepeat {
				if g.config.LittleEndian {
					b.WriteString(fmt.Sprintf("    %s = codec::get_basic_type_le<%s,%s>(buf);\n", strcase.ToLowerCamel(f.Name), listLenTyp.Name, typ.Name))
				} else {
					b.WriteString(fmt.Sprintf("    %s = codec::get_basic_type<%s,%s>(buf);\n", strcase.ToLowerCamel(f.Name), listLenTyp.Name, typ.Name))
				}

			} else {
				if g.config.LittleEndian {
					b.WriteString(fmt.Sprintf("    %s = buf.read_%s();\n", strcase.ToLowerCamel(f.Name), typ.Le))
				} else {
					b.WriteString(fmt.Sprintf("    %s = buf.write_%s();\n", strcase.ToLowerCamel(f.Name), f.GetType()))
				}
			}

		} else if size, ok := ParseCharArrayType(f.GetType()); ok {
			if f.IsRepeat {
				if g.config.LittleEndian {
					b.WriteString(fmt.Sprintf("    %s = codec::get_fixed_string_list_le<%s>(buf, %s);\n", strcase.ToLowerCamel(f.Name), listLenTyp.Name, size))
				} else {
					b.WriteString(fmt.Sprintf("    %s = codec::get_fixed_string_list<%s>(buf, %s);\n", strcase.ToLowerCamel(f.Name), listLenTyp.Name, size))
				}
			} else {
				b.WriteString(fmt.Sprintf("    %s = codec::get_fixed_string(buf, %s);\n", strcase.ToLowerCamel(f.Name), size))
			}
		} else if f.GetType() == "string" || f.GetType() == "char[]" {
			if f.IsRepeat {
				if g.config.LittleEndian {
					b.WriteString(fmt.Sprintf("    %s = codec::get_string_list_le<%s,%s>(buf);\n", strcase.ToLowerCamel(f.Name), listLenTyp.Name, strLenTyp.Name))
				} else {
					b.WriteString(fmt.Sprintf("    %s = codec::get_string_list<%s,%s>(buf);\n", strcase.ToLowerCamel(f.Name), listLenTyp.Name, strLenTyp.Name))
				}
			} else {
				if g.config.LittleEndian {
					b.WriteString(fmt.Sprintf("    %s = codec::get_string_le<%s>(buf);\n", strcase.ToLowerCamel(f.Name), strLenTyp.Name))
				} else {
					b.WriteString(fmt.Sprintf("    %s = codec::get_string<%s>(buf);\n", strcase.ToLowerCamel(f.Name), strLenTyp.Name))
				}
			}
		} else if f.InerObject != nil {
			if f.IsRepeat {
				if g.config.LittleEndian {
					b.WriteString(fmt.Sprintf("    %s = codec::get_object_List_le<%s,%s>(buf);\n", strcase.ToLowerCamel(f.Name), listLenTyp.Name, f.GetType()))
				} else {
					b.WriteString(fmt.Sprintf("    %s = codec::get_object_List<%s,%s>(buf);\n", strcase.ToLowerCamel(f.Name), listLenTyp.Name, f.GetType()))
				}
			} else {
				b.WriteString(fmt.Sprintf("    %s.decode(buf);\n", strcase.ToLowerCamel(f.Name)))
			}
		} else if _, ok := g.binModel.PacketsMap[f.GetType()]; ok {
			if f.IsRepeat {
				if g.config.LittleEndian {
					b.WriteString(fmt.Sprintf("    %s = codec::get_object_List_le<%s,%s>(buf);\n", strcase.ToLowerCamel(f.Name), listLenTyp.Name, f.GetType()))
				} else {
					b.WriteString(fmt.Sprintf("    %s = codec::get_object_List<%s,%s>(buf);\n", strcase.ToLowerCamel(f.Name), listLenTyp.Name, f.GetType()))
				}
			} else {
				b.WriteString(fmt.Sprintf("    %s.decode(buf);\n", strcase.ToLowerCamel(f.Name)))
			}
		} else if f.GetType() == "match" {
			b.WriteString(fmt.Sprintf("    switch (%s) {\n", strcase.ToLowerCamel(f.MatchKey)))
			for _, pair := range f.MatchPairs {
				b.WriteString(fmt.Sprintf("        case %s:\n", pair.Key))
				b.WriteString(fmt.Sprintf("            %s = std::make_unique<%s>();\n", strcase.ToLowerCamel(f.Name), pair.Value))
				b.WriteString("            break;\n")
			}
			b.WriteString("        default:\n")
			b.WriteString(fmt.Sprintf("            throw std::runtime_error(\"Unknown match key: \" + std::to_string(%s));\n", strcase.ToLowerCamel(f.MatchKey)))
			b.WriteString("    }\n")
			b.WriteString(fmt.Sprintf("    %s->decode(buf);\n", strcase.ToLowerCamel(f.Name)))
		} else {
			b.WriteString("-- unsupport type:" + f.GetType() + "\n")
		}
	}
	b.WriteString("}\n")
	return b.String()
}

func (g CppGenerator) generateToString(p *model.Packet) string {
	var b strings.Builder
	b.WriteString("std::string toString() const override {\n")
	b.WriteString("    std::ostringstream oss;\n")
	b.WriteString("    oss << \"" + p.Name + " { \"\n")
	for i, field := range p.Fields {
		if i > 0 {
			b.WriteString("    << \", \"\n")
		}
		if field.IsRepeat {
			b.WriteString(fmt.Sprintf("    << \"%s: \" << codec::join_vector(%s)\n", field.Name, strcase.ToLowerCamel(field.Name)))
			continue
		}
		if _, ok := cppBaiscTypeMap[field.GetType()]; ok {
			b.WriteString(fmt.Sprintf("    << \"%s: \" << std::to_string(%s)\n", field.Name, strcase.ToLowerCamel(field.Name)))
			continue
		}
		if field.InerObject != nil {
			b.WriteString(fmt.Sprintf("    << \"%s: \" << %s.toString()\n", field.Name, strcase.ToLowerCamel(field.Name)))
			continue
		}
		if _, ok := g.binModel.PacketsMap[field.GetType()]; ok {
			b.WriteString(fmt.Sprintf("    << \"%s: \" << %s.toString()\n", field.Name, strcase.ToLowerCamel(field.Name)))
			continue
		}
		if field.GetType() == "match" {
			b.WriteString(fmt.Sprintf("    << \"%s: \" << %s->toString()\n", field.Name, strcase.ToLowerCamel(field.Name)))
			continue
		}
		b.WriteString(fmt.Sprintf("    << \"%s: \" << %s\n", field.Name, strcase.ToLowerCamel(field.Name)))
	}
	b.WriteString("    << \" }\";\n")
	b.WriteString("    return oss.str();\n")
	b.WriteString("}\n")
	return b.String()
}

func (g CppGenerator) generateOstreamOperator(p *model.Packet) string {
	var b strings.Builder
	b.WriteString(fmt.Sprintf("inline std::ostream& operator<<(std::ostream& os, const %s& pkt) {\n", p.Name))
	b.WriteString("    return os << pkt.toString();\n")
	b.WriteString("}\n")
	return b.String()
}

func (g CppGenerator) getFieldType(f *model.Field) string {
	typ := ""
	if t, ok := cppBaiscTypeMap[f.GetType()]; ok {
		typ = t.Name
	} else if _, ok := ParseCharArrayType(f.GetType()); ok {
		typ = "std::string"
	} else {
		switch f.GetType() {
		case "match":
			typ = "std::unique_ptr<codec::BinaryCodec>"
		case "string", "char[]":
			typ = "std::string"
		default:
			typ = f.GetType()
		}
	}
	if f.IsRepeat {
		typ = "std::vector<" + typ + ">"
	}
	return typ
}
