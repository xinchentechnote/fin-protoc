package parser

import (
	"fmt"
	"strings"

	"github.com/iancoleman/strcase"
	"github.com/xinchentechnote/fin-protoc/internal/model"
)

//lua base wireshark plugin generator

// LuaWspGenerator implements Generator for lua bases wireshark plugin
type LuaWspGenerator struct {
	config GeneratorConfig
}

// NewLuaWspGenerator new
func NewLuaWspGenerator(config GeneratorConfig) *LuaWspGenerator {
	return &LuaWspGenerator{
		config: config,
	}
}

// Generate code
func (g LuaWspGenerator) Generate(binModel *model.BinaryModel) (map[string][]byte, error) {
	output := make(map[string][]byte)
	var b strings.Builder
	b.WriteString("-- Code generated by fin-protoc. DO NOT EDIT.\n")
	rootPacket := binModel.RootPacket
	//Proto
	b.WriteString(fmt.Sprintf("local %s_proto = Proto(\"%s\", \"%s Protocol\")\n", strcase.ToSnake(rootPacket.Name), rootPacket.Name, rootPacket.Name))
	//ProtoField
	b.WriteString(g.generateFieldDefinition(binModel))
	b.WriteString(fmt.Sprintf(`for _, field in pairs(fields) do
    %s_proto.fields[field] = field
end`, strcase.ToSnake(rootPacket.Name)))
	b.WriteString("\n\n")
	//Main Dissector
	b.WriteString(g.generateMainDissector(rootPacket))
	output[strcase.ToSnake(strcase.ToSnake(rootPacket.Name))+".lua"] = []byte(b.String())
	return output, nil
}

func (g LuaWspGenerator) generateMainDissector(rootPacket model.Packet) string {
	var b strings.Builder
	b.WriteString(fmt.Sprintf("function %s_proto.dissector(buf, pinfo, tree)\n", strcase.ToSnake(rootPacket.Name)))
	b.WriteString("-- TODO\n")
	b.WriteString("end\n")
	return b.String()
}

func (g LuaWspGenerator) generateFieldDefinition(model *model.BinaryModel) string {
	var b strings.Builder
	b.WriteString("local fields = {\n")
	for _, pkt := range model.Packets {
		b.WriteString(g.generateFieldDefinitionFromPacket(&pkt))
	}
	b.WriteString("}\n\n")

	return b.String()
}

func (g LuaWspGenerator) generateFieldDefinitionFromPacket(pkt *model.Packet) string {
	var b strings.Builder
	for _, f := range pkt.Fields {
		switch f.GetType() {
		case "i8":
			b.WriteString(fmt.Sprintf("    %s = ProtoField.int8(\"%s\", \"%s\", base.DEC),\n",
				strcase.ToSnake(f.Name), strcase.ToSnake(f.Name), f.Name))
		case "i16":
			b.WriteString(fmt.Sprintf("    %s = ProtoField.int16(\"%s\", \"%s\", base.DEC),\n",
				strcase.ToSnake(f.Name), strcase.ToSnake(f.Name), f.Name))
		case "i32":
			b.WriteString(fmt.Sprintf("    %s = ProtoField.int32(\"%s\", \"%s\", base.DEC),\n",
				strcase.ToSnake(f.Name), strcase.ToSnake(f.Name), f.Name))
		case "i64":
			b.WriteString(fmt.Sprintf("    %s = ProtoField.int64(\"%s\", \"%s\", base.DEC),\n",
				strcase.ToSnake(f.Name), strcase.ToSnake(f.Name), f.Name))
		case "u8":
			b.WriteString(fmt.Sprintf("    %s = ProtoField.uint8(\"%s\", \"%s\", base.DEC),\n",
				strcase.ToSnake(f.Name), strcase.ToSnake(f.Name), f.Name))
		case "u16":
			b.WriteString(fmt.Sprintf("    %s = ProtoField.uint16(\"%s\", \"%s\", base.DEC),\n",
				strcase.ToSnake(f.Name), strcase.ToSnake(f.Name), f.Name))
		case "u32":
			b.WriteString(fmt.Sprintf("    %s = ProtoField.uint32(\"%s\", \"%s\", base.DEC),\n",
				strcase.ToSnake(f.Name), strcase.ToSnake(f.Name), f.Name))
		case "u64":
			b.WriteString(fmt.Sprintf("    %s = ProtoField.uint64(\"%s\", \"%s\", base.DEC),\n",
				strcase.ToSnake(f.Name), strcase.ToSnake(f.Name), f.Name))
		case "f32":
			b.WriteString(fmt.Sprintf("    %s = ProtoField.float(\"%s\", \"%s\"),\n",
				strcase.ToSnake(f.Name), strcase.ToSnake(f.Name), f.Name))
		case "f64":
			b.WriteString(fmt.Sprintf("    %s = ProtoField.double(\"%s\", \"%s\"),\n",
				strcase.ToSnake(f.Name), strcase.ToSnake(f.Name), f.Name))
		case "string":
			b.WriteString(fmt.Sprintf("    %s = ProtoField.string(\"%s\", \"%s\"),\n",
				strcase.ToSnake(f.Name), strcase.ToSnake(f.Name), f.Name))
		case "bytes":
			b.WriteString(fmt.Sprintf("    %s = ProtoField.bytes(\"%s\", \"%s\"),\n",
				strcase.ToSnake(f.Name), strcase.ToSnake(f.Name), f.Name))
		case "bool":
			b.WriteString(fmt.Sprintf("    %s = ProtoField.bool(\"%s\", \"%s\"),\n",
				strcase.ToSnake(f.Name), strcase.ToSnake(f.Name), f.Name))
		default:
			b.WriteString(fmt.Sprintf("    -- Unsupported type: %s\n", f.GetType()))
		}
	}
	return b.String()
}
